package fi.utu.tech.ThreadRunner;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;

import fi.utu.tech.ThreadRunner.UI.MainWindowController;
import fi.utu.tech.ThreadRunner.UI.StatisticLine;
import fi.utu.tech.ThreadRunner.dispatchers.ControlSet;
import fi.utu.tech.ThreadRunner.dispatchers.IDispatcher;
import fi.utu.tech.ThreadRunner.dispatchers.DynamicDispatcher;
import fi.utu.tech.ThreadRunner.dispatchers.WithoutThreadsDispatcher;
import fi.utu.tech.ThreadRunner.dispatchers.StaticDispatcher;
import fi.utu.tech.ThreadRunner.tasks.TaskFactory;
import fi.utu.tech.ThreadRunner.workers.WorkerFactory;

/**
 * ThreadRunner App
 * 
 * DO NOT EDIT THIS FILE
 * 
 * Sovelluksen pääluokka
 * 
 * @author Jari Lehto <jaanle@utu.fi>
 * @version 1.0
 * @since 1.0
 */

public class App extends Application {

	private static Scene scene;
	private static MainWindowController controller;

	@Override
	public void start(Stage stage) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("mainWindow.fxml"));
		Parent root = loader.load();
		controller = loader.getController();
		setValues();

		scene = new Scene(root);
		stage.setMinHeight(600);
		stage.setMinWidth(800);
		stage.setTitle("ThreadRunner");
		stage.setScene(scene);
		stage.show();
	}

	private void setValues() throws IOException {
		controller.fillWorkerType(WorkerFactory.getWorkerTypes());
		controller.fillTaskType(TaskFactory.getTaskTypes());
	}

	public static void main(String[] args) {
		launch();
	}

	public static void runStatic(ControlSet controlSet) {
		IDispatcher disp = new StaticDispatcher();
		long startTime = System.nanoTime();
		disp.dispatch(controlSet);
		Float timing = Float.valueOf((System.nanoTime() - startTime) / (1000000));
		try {
			controller.addStaticResult(new StatisticLine(controlSet, timing));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void runDynamic(ControlSet controlSet) {
		IDispatcher disp = new DynamicDispatcher();
		long startTime = System.nanoTime();
		disp.dispatch(controlSet);
		Float timing = Float.valueOf((System.nanoTime() - startTime) / (1000000));
		try {
			controller.addDynamicResult(new StatisticLine(controlSet, timing));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void runWot(ControlSet controlSet) {
		IDispatcher disp = new WithoutThreadsDispatcher();
		long startTime = System.nanoTime();
		disp.dispatch(controlSet);
		Float timing = Float.valueOf((System.nanoTime() - startTime) / (1000000));
		try {
			controller.addWotResult(new StatisticLine(controlSet, timing));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

/*
 * DO NOT EDIT THIS FILE
 */
